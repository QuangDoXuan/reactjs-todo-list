name: Test workflow

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: 'ap-southeast-1'
  ECR_REPOSITORY: 'react-todo-list'

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.build-image.outputs.imagetag }}
      registry:  ${{ steps.build-image.outputs.registry }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "imagetag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "registry=$ECR_REGISTRY" >> $GITHUB_OUTPUT
  
  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: [build]

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Unit Test
        run: |
          npm install
          npm run test
        env:
          CI: false

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build, unit-test]
    steps:
      - uses: actions/checkout@v3

      - name: Unit Test
        run: |
          echo 'Integration test'
        env:
          CI: false

  deploy:
    name: Deploy to staging environment
    runs-on: ubuntu-latest
    needs: [build, unit-test, integration-test]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Add environment variables to env
        run: |
          echo IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${{ needs.build.outputs.image-tag }} >> .env

      - name: Build & Deploy
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{secrets.SSH_HOST}}
          USER_NAME: ${{secrets.USER_NAME}}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          scp -o StrictHostKeyChecking=no -i private_key ./.env ${USER_NAME}@${HOSTNAME}:~/
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
              # Now we have got the access of EC2 and we will start the deploy .
              export $(cat .env | xargs) &&
              export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} &&
              export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} &&
              docker pull ${IMAGE_URI} &&
              docker stop $(docker ps -a -q) &&
              docker container prune &&
              docker run -d -p 80:80 -t ${IMAGE_URI}
              '
